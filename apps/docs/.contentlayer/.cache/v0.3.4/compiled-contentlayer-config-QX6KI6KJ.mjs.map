{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/lib/rehype.ts", "../../../src/examples/index.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode, { type Options } from \"rehype-pretty-code\";\n\nimport { addCode, postProcess, preProcess } from \"./src/lib/rehype\";\n\nconst LinkProperties = defineNestedType(() => ({\n  name: \"LinkProperties\",\n  fields: {\n    radix: {\n      type: \"string\",\n    },\n    source: {\n      type: \"string\",\n    },\n  },\n}));\n\nexport const Doc = defineDocumentType(() => ({\n  name: \"Doc\",\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    description: { type: \"string\", required: false },\n    date: { type: \"date\", required: false },\n    links: {\n      type: \"nested\",\n      of: LinkProperties,\n      description: \"\",\n      required: false,\n    },\n    toc: {\n      type: \"boolean\",\n      default: true,\n      required: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n    url: { type: \"string\", resolve: (doc) => `/${doc._raw.flattenedPath}` },\n  },\n}));\n\nconst prettyCodeOptions: Options = {\n  defaultLang: {\n    block: \"tsx\",\n    inline: \"tsx\",\n  },\n  theme: \"vitesse-dark\",\n};\n\nexport default makeSource({\n  contentDirPath: \"./src/content\",\n  documentTypes: [Doc],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      preProcess,\n      rehypeSlug,\n      addCode,\n      // @ts-expect-error\n      [rehypePrettyCode, prettyCodeOptions],\n      postProcess,\n    ],\n  },\n});\n", "import { u } from \"unist-builder\";\nimport { visit } from \"unist-util-visit\";\nimport type { Node } from \"unist-builder/lib\";\n\nimport { Examples } from \"../examples\";\n\nexport const preProcess = () => (tree: UnistTree) => {\n  visit(tree, \"element\", (node: UnistNode) => {\n    if (node?.type === \"element\" && node?.tagName === \"pre\") {\n      if (!node.children || node.children.length === 0) {\n        return;\n      }\n\n      const [codeEl] = node.children;\n\n      if (codeEl?.tagName !== \"code\") {\n        return;\n      }\n\n      node.raw = codeEl.children?.at(0)?.value;\n    }\n  });\n};\n\nexport const postProcess = () => (tree: UnistTree) => {\n  visit(tree, \"element\", (node: UnistNode) => {\n    if (node?.type === \"element\" && node?.tagName === \"figure\") {\n      if (\n        !node.properties ||\n        !(\"data-rehype-pretty-code-figure\" in node.properties)\n      ) {\n        return;\n      }\n      const title = node.children?.find(\n        (child) => child.tagName === \"figcaption\"\n      )?.children?.[0].value;\n      const preElement = node.children?.find(\n        (child: UnistNode) => child.tagName === \"pre\"\n      );\n\n      if (preElement?.tagName !== \"pre\") {\n        return;\n      }\n\n      if (preElement?.properties) {\n        preElement.properties.raw = node.raw!;\n        preElement.properties.title = title;\n      }\n    }\n  });\n};\n\nexport const addCode = () => (tree: UnistTree) => {\n  visit<UnistNode, \"element\">(tree, (node: UnistNode) => {\n    if (node.name === \"ComponentPreview\") {\n      const nameAttribute = getNodeAttributeByName(node, \"name\");\n      const code = nameAttribute\n        ? Examples[nameAttribute?.value as keyof typeof Examples]?.code ?? \"\"\n        : \"\";\n\n      node.children?.push(\n        u(\"element\", {\n          tagName: \"pre\",\n          properties: {\n            raw: code,\n          },\n          raw: code,\n          children: [\n            u(\"element\", {\n              tagName: \"code\",\n              data: { meta: \"showLineNumbers\" },\n              properties: {\n                className: [\"language-tsx\"],\n              },\n              children: [\n                {\n                  type: \"text\",\n                  value: code,\n                },\n              ],\n            }),\n          ],\n        }) as unknown as UnistNode\n      );\n    }\n  });\n};\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute) => attribute.name === name);\n}\n\nexport interface UnistNode extends Node {\n  type: string;\n  name?: string;\n  tagName?: string;\n  raw?: string;\n  value?: string;\n  properties?: {\n    raw?: string;\n    className?: string;\n    [key: string]: unknown;\n  };\n  attributes?: {\n    name: string;\n    value: unknown;\n    type?: string;\n  }[];\n  children?: UnistNode[];\n  title?: string;\n}\n\nexport interface UnistTree extends Node {\n  children: UnistNode[];\n}\n", "// @ts-nocheck\n/* -------------------------------------------------------------------------- */\n/*                    GENERATED FILE, DO NOT EDIT MANUALLY!                   */\n/* -------------------------------------------------------------------------- */\nimport { lazy, type LazyExoticComponent } from \"react\";\n\ntype Example = {\n  component: LazyExoticComponent<() => JSX.Element>;\n  code: string;\n};\n\nexport const Examples: Record<string, Example> = {\n};\n"],
  "mappings": "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",
  "names": []
}
